III. Последовательность действий, для создания всего

************************************  # план действий
Создать приложение:
  1. Создание Model + загрука её (rake db:migrate)
  2. Создание Controller
  3. Привязать маршрут(Routes) по которому следовать (resource/resources)
  4. Actions (index(множественных, как resources), new+create, edit+update, destroy(delete)) т.е. работа в Controller
  5. Views т.е. работа с самой страницей
  6. Вывод ошибок


************************************ 	# создать приложение
rails new name              		    	- (cmd) создать каталог rails
start rails server 			        			- (cmd) запустить сервер
start rails s                         - (cmd) запустить сервер, сокращённый вариант


1. ************************************ 				# создание модели/БД (dm\migrate\имяфаила.rb) сама модель создаётся (app\models\article.rb)
rails generate model Article title:string text:text 	- (cmd) создаём модель с услоаиями (можно сразу, можно потом изменить в самой таблице), в данном случае title:string text:text
rails g model Article title:string text:text 		- (cmd) сокращённый вариант
rake db:migrate 										- (cmd) запустить миграцию

************************************                    # пример обработки  MODELS (сбда включается валидация)
class Article < ApplicationRecord
  validates :title, presence: true
  validates :text, presence: true
end


2. ************************************  # создание контроллера (пример для Articles)
rails generate controller articles    - (cmd) создать "обработчик"
rails g controller articles           - (cmd) создать "обработчик" сокращённый вариант


3. ************************************                                  # пример обработки  ROUTES
Rails.application.routes.draw do                                      - открываем фаил (\config\routes.rb)
  get 'home/index'
  get 'terms' => 'pages#terms'                                        - определяем путь перехода terms
  get 'about' => 'pages#about'                                        - определяем путь перехода about

  resource :contacts, only: [:new, :create], path_names: {:new => ''} - изменили путь, пустая строка - означает, что путь останется неизменным (но если хочешь поменять, то пиши что нужно) + создаём правила для пользования (2 из 6 добавили)

  resources :articles do                                              - привязали к arcicles путь comments (т.к. комментарии - зависят от сатьи)
      resources :comments
  end
end


4. ************************************ 	            # пример обработки  Articles (добавление Actions)
class ArticlesController < ApplicationController
  def index
    @articles = Article.all
  end

  def show                                        - добавили метод ПОКАЗАТЬ (пример со статьями)
    @article = Article.find(params[:id])
  end

  def new                                         - добавили метод НОВЫЙ (он обязан присутствовать)
  end

  def create                                      - добавили метод СОЗДАТЬ
    @article = Article.new(article_params)

    if @contact.save                              - сохраняем данные, а сохранение - делает, автоматически валидацию!!!
      redirect_to @contact                        - условия, от двойного submith'a !!
    else                                          - условия, если не все поля будут заполнены
      render action: 'new'                        - возврат страницы \contacts\new
  end

  def edit                                        - добавили метод КОРРЕКТИРОВАТЬ
    @article = Article.find(params[:id])
  end

  def update                                      - добавили метод РЕАЛИЗАЦИЯ коррекции (в свзяки с методом edit)
    @article = Article.find(params[:id])

    if @article.update(article_params)
      redirect_to @article
    else
      render action: 'edit'
    end
  end

  private                                         - условия данных, которые будут использоваться выше (своего рода - защита)

  def contact_params                              - создали функцию, обычно имя идёт от названия, с чем будем работать + _params  
    params.require(:contact).permit(:email, :message) - указали, нужные параметры
  end
end



5. ************************************                    # пример обработки  VIEWS (NEW)
<h1>New article</h1>

<%= form_for :article, url: articles_path do |f| %>       - форма вывода ошибки
  <% if @article && @article.errors.any? %>
  <p>
    <ul>
      <% @article.errors.full_messages.each do |msg| %>
        <li><%= msg %></li>
      <% end %>
    </ul>
  </p>
  <% end %>

  <p>                                                     - форма вывода поля для ввода заголовка статьи
    <%= f.label :title %><br/>
    <%= f.text_field :title %>
  </p>

  <p>                                                     - форма вывода поля для ввода текста статьи
    <%= f.label :text %><br/>
    <%= f.text_area :text %>
  </p>

  <p>                                                     - добавление кнопки, отправки на сервер
    <%= f.submit %>                                       - устойчивое выражение рельс, для отправки на сервер введённых данных
  </p>
<% end %>


6.  ************************************                    # пример обработки  ASSETS\STYLESHEETS (сбда включается ошибки)
.field_with_errors input {                              - поле для INPUTS
  border-color: red;                                    - делать границу красным (вводишь условия, которые тебе нужны)
}

.field_with_errors textarea {                           - поле для TEXTAREA
  border-color: red;                                    - делать границу красным (вводишь условия, которые тебе нужны)