#encoding: utf-8
====================================================================================================
ДЕЙСТВИЯ:===========================================================================================
puts      	вставить текст, переменную (каждой строке будет новое значение)
print     	вставить текст, переменную (соеденяет строки)
gets      	ввести строку (не цифра)
name 		присваивает всему написанному, строку, имя и т.д.
return    	результат последнего выражения
break     	пауза, закончить цикл !!
sleep     	задержаться на (sleep 0.1) на 0.1с и т.д.
exit		выход
====================================================================================================
КОММАНДЫ,СТРОКИ:====================================================================================
.inspect		          выводит как написано в программе, или показать содержимое хеша и т.д.
.strip                    удаление белых пробелов
.capitalize               делать Большой первый символ(ячейку) символ
.chomp                    обрезает строкку
.reverse                  перевернуть (Hello -> olleH)
.join(' ') 				  объеденить строку (в скобках указано, через пробел, а без него - объеденится всё слитно)
.size(.length)		  	  считать количество символов в строке, или количество вариантов в макссиве!
.delete			  		  удалить (из массива к примеру (.delete_at 0) удалится элемент с порядковым номером 0)
.clear                    очистить значение
.results_as_hash = true	  разбить на хеш
.split               	  разбить текст на массив (каждая строка - один массив!) (L17.5.0.rb)
.split(/ \n|\s|\.|\,/) 	  \s white space, | - or, \ - заэскейпить
.uniq                     исключить повторки (2 раза ввели red, red -> выведет один раз) (L9.2.1.rb)
.equal?                   сравнивать
.even?                    чётное?
.include? "xx"            содержит, что-то (L18.1.3.rb)
.each                     (цикл!) каждый (можно пронумеровать, или что-то сделать) (L10.1.2.rb)
.execute		          функция, может принимать 2а параметра, если хотим # @db.execute 'INSERT INTO Posts (content, created_date) VALUES (?, datetime())', [content]
====================================================================================================
ПЕРЕМЕННЫЕ:=========================================================================================
@			        глобальная переменная (которая будет использоваться и в цикле) (L9.0.2.rb + L9.0.3.rb)
@			        глобальная в class (L14.0.2.rb)
@@                	переменная которая сохраняет значения везде, в одном месте изменилось на х+1 то в другом месте она так-же поменяется х+1
CONSTANT
$			        переменная которая и за пределами циклов классов, будет во всей программе действительна
attr_reader :aa		переменная только для чтения
attr_accessor :aa	переменная для записи и чтения (L14.1.3.rb)
attr_writer :aa		переменная для записи
====================================================================================================
УКАЗАТЕЛИ, СИМВОЛЫ(Symbol) И ПРОЧЕЕ:================================================================
:       (запомнить объект для любых мест) они для ускорения и оптимизации (L9.1.2.rb)
./      требования require ("./file1.rb") L16 (фаилы аа.rb & bb.rb)
lambda	(L16.3.1.rb)
yield   добавляется в функцию, для определения (если не добавить, то функцию def test ... end      ->       test {...} ничего не произойдёт)
send	метапрограмировение (L17.1.0.rb)
====================================================================================================
ОБЪЕКТЫ И ЭКЗЕМПЛЯРЫ КЛАССА (instance):=============================================================
.to_i (Integer)   55.6     (дробную часть отсечёт) ввести цифра (to_integr) пример как писать выше указанное
.to_f (Float)     3.14     дробное число
String            "aa" "2" строка, цифра тоже идёт как строка
Fixnum            2 22     целые числа
Bignum            22222222 большие значения
rand(5)           0...4    (random число от 0 до 4)
rand(5..10)       от 5 до 10 включительно
6 + 4 			  #=> 10
6 - 4     		  #=> 2
6 * 4       	  #=> 24
6 / 4     		  #=> 1
6 % 4     		  #=> 2
6 ** 4     		  #=> 1296
====================================================================================================
ЦИКЛЫ, ФУНКЦИИ, КЛАССЫ:(end)========================================================================
10.times do |x|			        10 рас повторять блок (х берется за значение от 0 до 9 в данном примере)

(1..10).each do			        делать для каждого элемента (к примеру массива) (L8.2.1.rb)
.each_with_index do |item,i|	объект и индекс (в одном флаконе) (L11.1.0.rb)

1.upto(12)            1....12 (увелисить от 1 до 12)
12.downto(1)          12....1 (уменьшить с 12 до 1)

loop do               бесконечный цикл
while true            бесконечный цикл
while !nil            бесконечный цикл
while 2+2==4 do       пока выполняется это условие, будет тото.. (L8.2.rb)

                                если в def имеется параметр хеш (он обязан идти последним)
def                             сохранить цикл (define)(т.е. потом одной строкой запустить по новой) (L9.0.2.rb)
def blabla?			            в цикле true or falce (метод) (L14.2.0.rb)
yeild (в блоке def)             (L16.2.0.rb, L16.2.1.rb)
method_missing name             метод, запускающийся в тот момент, когда имя метода не указали (он автоматически сработает) (L17.2.0.rb, L17.2.1.rb)
send :define_method, "bla" do	функция # во время исполнения программы, можешь определить свой метод по имени (L17.3.0.rb, L17.3.1.rb)

class                 цикл на классы (L15.0.2.rb) ДОСТОЙНЫЙ ПРИМЕР
class Cat < Animal	  пример унаследования(Inharitance)!! (L.15.2.0.rb)
super				  супаер class (L15.2.1.rb)
initialize            (в классе)	длобавить хеш в класс (L.14.1.1.rb)
def self.(имя)        статический метод (выводить без создания нового елемента, типа .new)

module				  модули включают в себя классы (создано для програмистов, упрощения кода) (L16.5.0.rb)

	СРАВНЕНИЯ: (end)
	if a==1			                         если а рано 1
	if a!=1			                         если а не равно 1
	if (<=; >=; <; >)	                     больше, меньше и т.д.
	if a==0 && a<10                          приставка И (дополнительные условия)
	if a==y .. elsif a<=y..	                 иначе
	if a==y .. else	...	                     любое другое значение
	puts "Already exist!" if @hh[set_name]   проверка на повторность (L13.1.2.rb)
	if !метод def?		                     если (что-то, к примеру из метода def) не существует, то ... (L27)

	a+b == 4? true:falce                     сравнение в одну строку, только где true falce - пишешь свои условия 
  # Если переменная @barber = Дарья Олеговна, тогда выводить 'selected'(то что выбрано), если нет - тогда ''
	<option <%= @barber == 'Дарья Олеговна' ? 'selected' : '' %>>Дарья Олеговна</option>
====================================================================================================
МАССИВЫ(Array):=====================================================================================
arr = [0a,1b,2c,3d,4e]	как с массива выбрать только 1b,2c,3d - [1..3] (не забываем, что индекс начинается с 0) (L10.1.2.rb) 
arr = %w[HI Bye]        строчный массив
arr = ["HI","bye"]      строчный массив
arr = [:HI, :Bye]	    массив из символов
arr << name             добавить "name" в массив "arr"
arr2 = arr[rand(0..2)]  как с массива выбрать конкретный элемент, или чтобы рандомно что-то взялось
arr.each do (end)	    выводить каждый массив отдельно
|row|                   вывести строку (можно разбить по словам, индекс [0..9] и т.д.)
.delete_at 0            удалить из массива, удалится элемент с порядковым номером 0 (L10.2.2.rb)
.split                  разбить текст на массив (каждая строка - один массив!) (L17.5.0.rb)
.downcase! 				в конце восклицательный знак - означает, сделать действие над этим "словом" word.downcase! -> word = word.downcase
====================================================================================================
ХЕШИ(Hash,Dictionary,Hashtable, ассоциативные массивы):=============================================
hh={'key'=>'value','..'=>'..'}	  Hash (L11.2.0.rb)
puts hh['key']                    выведет 'value'
hh.keys					          выводит все что есть значения
hh.values				          выводит все что есть результаты
hh.each do |key, value|  (end)	  выводить каждый хеш отдельно (L11.2.0.rb)
hh[key] << value			      добавление в хеш
hh[rand(0..(hh.size-1))]		  рандомное значение

.each_key do |key|			      работа с каждым ключём
.each_value do |value|			  работа с каждым значением
.merge                            объеденение хеш (L13.1.3.rb) book = book1.merge book2
.merge!                           объеденение хеш, и изменяет существующий (L13.1.4.rb) book1.merge! book2 (не нужна переменная к которой присваивают)
.select                           выбирает значения по определенному слову, выдает хеш
.values                           получает из хеша только ключи, выдает массив
.join(", ")                       соединяет массив в строку с разделителем (запятая)
.clear                            очистить хеш
.delete 'cat'                     удалить ключ 'cat' оно удаляется со значениями!
.keys                             выводит все что есть значения
.values                           выводит все что есть результаты

hh = {'cat' => [koshka, kot]}
if hh.has_key? 'cat'			  проверяет, есть ли вообще в хеш-значениях слово (прим. cat) (чтобы вывести ответ, вперед ставь puts) (L12.1.1.rb) 
if hh.key? 'cat'
if hh['cat']				      проверяет, есть ли вообще в хеш-значениях слово (прим. cat) (чтобы вывести ответ, вперед ставь puts) (L12.1.1.rb)
if hh.has_value? [value]		  проверяет, есть ли вообще в хеш-результ слово (прим. koshka)
hh.clear				          очистить хеш
hh.delete 'cat'				      удалить ключ 'cat' оно удаляется со значениями!

@error = hh.select{|key,_| params[key] ==""}.values.join(", ") # .join добавляtет в конце value (", ") и т.д. цикл выводит все значения value1, value2, value3 если они пустые*
разницы нет как называть _ или value - просто если переменная не используется, принято ее начинать с underscore ( _ ). Например: _foo или _bar. Можно написать _value - это ни на что не повлияет
====================================================================================================
РАБОТА С ФАИЛАМИ:===================================================================================
Указать целый путь, если его не указать, откроется тот что в этой папке где и данный фаил расположен
File.open("имя.расширение","r")		  "r" - открыть фаил для чтения (L17.4.1.rb)
File.open("имя.расширение","w")		  "w" - открыть фаил для заиси (изменения)
File.open("имя.расширение","w+")      "w+" или "r+" это для записи и изменения
File.open("имя.расширение","a")		  "a" - append дозаписать фаил (в конец) (L17.4.0.rb)
chmod 777 config.php			      Change mod (linux)
Dir.chdir				              Change dirictory изменить путь фаила
====================================================================================================
РАБОТА С ТЕКСТОМ и пр:==============================================================================
# encoding: cp866     сделать ruby читаемым для русского языка (пишется в начале программы)
#			          в конце строки (оставить комментарий для себя)
#{..}			      интерполяция строк
[...]			      Array
{...}			      Hash
условия + {...}       скобки, этог do ... end
(1..5)			      от 1 до 5
(1...5)			      от 1 до 4
a,b=b,a               поменять переменные местами
=>                    Hash Rocket
''                    можно использовать везде их, кроме интерполяции
""                    используются везде, и 100% в интерполяции "#{}"
||                    символ пайпа, означает или (or)
+=                    это тоже самое что (х + 1)
>                     сохранить в какой либо фаил (при повторном применении, замещает все фаилы!!) ruby L13.1.4.rb > book.txt
>>                    сохранить в какой либо фаил, дописав в конце ruby L13.1.4.rb > book.txt
(/\ и т.д.)           xтобы вывести эти символы текстом, надо их дублировать "//"

.class                определяем тип данных
.object_id            объекта память, индификатор
.methods              методы с данным значением

\n			          (new line, line deed) пример ( print "Hello/n" это тоже самое что puts "Hello" )
\t			          табуляция (/tname)
\r 			          (return, carriage return (cr) ) возврат корректки
index  	              он всегда от 0 и до ... (например в массиве[])

api		              application programm interface
public		          для общего пользования
privite		          приватный
protected	          ???

irb       (через консоль)программа сразу делает что ты написал
====================================================================================================
====================================================================================================
P.S. Урок 40  00:00 Time  - Code The problem with your code is that it's doing exactly what you told it to do. : )
refactoring       - перепроектирование кода, переработка кода, равносильное преобразование алгоритмов — процесс изменения внутренней структуры программы, не затрагивающий её внешнего поведения и имеющий целью облегчить понимание её работы.
extract variable  - выделение отдельной переменной

https://github.com/ro31337/rubyschool/blob/master/README.md	                            # что в уроках
https://github.com/ro31337/rubyschool                     	                            # задания
https://github.com/arbox/ruby-style-guide/blob/master/README-ruRU.md#ternary-operator   # изучить!
https://ru.wikibooks.org/wiki/Ruby                                                      # Ruby manual rus
http://rusrails.ru/search?utf8=%E2%9C%93&search=JSON                                    # документация на русском
http://phrogz.net/programmingruby/tut_classes.html                                      # Ruby manual
http://www.tutorialspoint.com/ruby/ruby_modules.htm                                     # mixin
http://htmlbook.ru/html/option                                                          # html сайт

https://github.com/arbox/ruby-style-guide/blob/master/README-ruRU.md#ternary-operator   # как правильно оформлять код (ruby naming conventions)
neumerate window.localStorage site:stackoverflow.com                                    # пример, как искать в google

git clone https://github.com/rubyschool-us/sinatra-bootstrap-clean.git                  # заготовка сайта


######### РАБОЧАЯ СРЕДА ############
************************************
1. subline / Far      - рабочая среда
2. start ungit        - запуск в отдельном окне git
3. start ruby app.rb  - запуск в отдельном окне сам сайт

start ungit                 - запустить в отдельном окне git
git pull                    - загрузить изменения
git clone                   - копировать репозиторий
wget --no-check-certificate - скачать фаил без сертификата
----------------- 			# sublime табуляция 2пробела
{
  "tab_size": 2,
  "translate_tabs_to_spaces": true,
  "detect_indentation": false
}


############ ПРОГРАММЫ #############
************************************
Fiddler (Charless proxy --for Mac)    # программа, которая показывает всё что происходит при общении с сервером!!  31 урок 28 минута
URL undecoder                         # читать фидлер запросы и т.д.


############ КОДДИНГ ###############
************************************
hh = {
  :user_name => "Введите имя",
  :user_phone => "Введите телефон",
  :user_time => "Введите дату и время"}

@error = hh.select{|key,_| params[key] ==""}.values.join(", ") # .join добавляtет в конце value (", ") и т.д. цикл выводит все значения value1, value2, value3 если они пустые*
разницы нет как называть _ или value - просто если переменная не используется, принято ее начинать с underscore ( _ ). Например: _foo или _bar. Можно написать _value - это ни на что не повлияет

1.0 @error = hh.select                                              # выбирает и обрабатывает хеш hh
1.1 @error = hh.select{|key,_| params[key] ==""}.values             # если key(один из трёх) и его параметр (value) - равен пустому значению, тогда выводить value данного ключа(key)
1.2 @error = hh.select{|key,_| params[key] ==""}.values.join(", ")  # .join добавляtет в конце value (", ") и т.д. цикл выводит все значения value1, value2, value3 если они пустые*
  .select... # выбирает значения по определенному словию, выдает хеш
  .values # получает из хеша только ключи, выдает массив
  .join... # соединяет массив в строку с разделителем (запятая)

if @error != ''
  return erb :visit
end
************************************************************************************************************
Вариант 1 + 1.1
<select name="barber" class="form-control">
<!-- 
  <option <%= @barber == 'Александр Евгеньевич' ? 'selected' : '' %>>Александр Евгеньевич</option>
  <option <%= @barber == 'Лев Александрович' ? 'selected' : '' %>>Лев Александрович</option>
  <option <%= @barber == 'Дарья Олеговна' ? 'selected' : '' %>>Дарья Олеговна</option>
  <option <%= @barber == 'Олег Евгеньевич' ? 'selected' : '' %>>Олег Евгеньевич</option>
  <option <%= @barber == 'Елена Георгиевна' ? 'selected' : '' %>>Елена Георгиевна</option>
-->
  <% @barbers.each do |item| %>
    <option <%= @barber == item['name'] ? 'selected' : '' %> ><%= item['name'] %></option>
  <% end %>
</select>
       ###########       ###########       ###########

Вариант 2
<select name="client[barber]" class="form-control" value="<%= @c.barber %>">

  <% @barbers.each do |barber| %>
    <option <%= @c.barber == barber.name ? 'selected' : '' %>><%= barber.name %></option> <----- помогите расписать эту строку (вариант 3 расписывает)
  <% end %>

</select>
       ###########       ###########       ###########

Вариант 3
<select name="client[barber]" class="form-control" value="<%= @c.barber %>">

  <% @barbers.each do |barber| %>
    
    <% if @c.barber == barber.name %>
        <option selected><%= barber.name %></option>
    <% else %>
      ""                                              # пустое значение
        <option><%= barber.name %></option>
    <% end %>
  <% end %>
</select>
************************************************************************************************************