#encoding: utf-8
I. Установка всех гемов
	# Gemfile
source "https://rubygems.org"

gem "sinatra"
gem "sqlite3"
gem "activerecord"
gem "sinatra-activerecord"
gem "sinatra-contrib"

group :development do
	gem "tux"
end
	# (cmd) установка Gemfile
bundle install
************************************************************************************************************
************************************************************************************************************



II. Определения
<br/>						- отделись чуть-чуть
<hr/>						- отделить сильно (полоса)
<table></table>				- вывод столбца
<tr></tr> 					- row = строка
<td></td>					- тег столбца

id="" 						- 
name="" 					- название переменной
value=""					- назначить переменную (глобальную например, или задать конкретное значение)
type=""						- тип, текст, цифры, и т.д.
class=""					- 
placeholder=""				- текст подсказка, который будет на заднем плане
width="200"					- ширина
height="200"				- высота
onclick="alert('hello!')" 	- по счелчку кнопки, вызвать функцию - проверка кнопки* (btn)
onclick="return falce" 		- return falce, служит для возврата страниццы, т.е. данные к примеру не отправлять на сервер при нажатии

navbar-right 				- разместить справа (кнопку и т.д.)
hidden 						- скрыть содержимое (строки к примеру)

<%=  %>						# выводить переменную, вывести переменную
<%   %>						# вырожение будет исполненно, но выводиться не будет
value="<%=@user_name%">		# запоминание переменной
************************************************************************************************************
************************************************************************************************************



III. Оформление страницы и что к чему

************************************ 	# Основа
<!DOCTYPE html>
<html>
	<head>
		<title></title>
	</head>
	<body>

	</body>
</html>


************************************ 	# Оформление
<!DOCTYPE html>
<html>
	<head>
		<title></title> 											# тут название самой вкладки 
		<link href="/styles.css" rel="stylesheet" media="all" />	# подключение плагинов типа .css .msql3 .js и т.д.
	</head>															# всё что будет на странице
	<body>
		<form action="/куда отправлять форму" method="GET или POST" role="form">
			<div class="form-group">
				<label>Ваше имя:</label>
				<input name="user_name" type="text" class="form-control" aria-describedby="emailHelp" placeholder="Введите Ваше имя" value="<%=@user_name%">
			</div>
		<button type="submit" class="btn btn-primary">Название кнопки</button>
		</form>
	</body>
</html>


************************************ 	# так правильно оформлять таблицу
<table>
	<thead>
		<th></th>
	</thead>
	<tbody>
		<tr></tr>
	</tbody>
</table>


************************************	# вывод таблицы
<table>									# вывод столбца
	<tr> 								# row = строка
		<td>	</td>					# тег столбца
	</tr>
</table>


************************************ 	# создание кнопки и пр. отличаи
<a class="btn..."></a> 					# ссылка - перенаправляет на какую-то страницу
<button class="btn..."></button> 		# кнопка не будет submit'тить форму, на неё можно будет просто нажать (к примеру: добавить один елемент в корзину)
<input type="submit"></input> 			# кнопка с submit'ом и отправкой целой формы на сервер, но на экране будет видна, только одна кнопка
************************************************************************************************************
************************************************************************************************************



IV. Правила, подключение и т.д.

************************************ 	# Когда браузер хочет получить какие-то данные, корень сайта означает (общепринято)
get '/' do
	erb :index
end


************************************ 	# Когда браузер хочет отправить какие-то данные
post '/' do
   	@login = params[:aaa] 				# хеш синатры, обращение к ключу ааа
	erb :index
end


************************************ 	# пример подключения скриптов
<script type="text/javascript">
  $(function(){

    $('#color').simplecolorpicker();		# сам скрипт
    $('#datetimepicker').datetimepicker();

  });
</script>


************************************
h1 {					#{применяется правило, которое внутри к конкретному тегу}
	font-family: Arial;
}
************************************************************************************************************
************************************************************************************************************



V. Полезные программы коддинг

************************************	# На проверку ошибки, кидается обычно в layout 
<div>
      <%if @error && @error.length > 0 then %>
          <div class="alert alert-danger"><%=@error%></div>
      <% end %>
      <%= yield %>
</div>


************************************ 	# На проверку введенных данных (пример программы,  (если ничего не ввёл))
hh = {
	:name_post => "Введите имя поста!",
    :text_post => "Введите содержание поста!"}

@error = hh.select{|key,values| params[key] ==""}.values.join(", ")	# запомни эту строчку !!!

if @error != ''
	return erb :new_post
end


************************************ 	# Добавления товаров в корзину, по id
hh ={}

loop do
	puts 'Enter product id: '
	id = gets.chomp 			# задали id товара

	puts 'Enter amount (how much items you want to order): '
	n = gets.chomp.to_i 		# суольуо штук будем закупать

	x = hh[id].to_i 			# читает хеш value (0 если если не существует), тоесть становится параметром value
	x = x + n 					# увеличить на n
	hh[id] = x 					# добавить в хеш value

	puts hh.inspect
	puts '================='

	total = 0
	hh.each do |key, value| 	# посчитать общее колличество добавленных вещей в корзину
		total = total + value
	end

	puts "Total items in cart: #{total}"
end
************************************************************************************************************
************************************************************************************************************



VI. Полезное плагины и не только
https://stackoverflow.com/questions/19607851/use-bootstrap-grid-with-variable-number-of-cells	# bootstrap GRID
https://github.com/Eonasdan/bootstrap-datetimepicker											# календарь
http://getbootstrap.com/																		# bootstrap

https://codepen.io/ 																			# сайт, который код переводит сразу в JS, HTML и т.д.
http://plnkr.co/edit/?p=catalogue 																# сайт, который код переводит сразу в JS, CSS, HTML

.css 	# содержание 
.erb	# расширение с которым работает ruby (page)
.js 	# расширение Java Script
CDN		# сервер откуда грузить подгрузки бутстреп и т.д.


http://htmlbook.ru/html/option																	# мануал
************************************************************************************************************
************************************************************************************************************



Разобрать!!!

	#####################
	# .js (java scripts) https://github.com/tkrotoff/jquery-simplecolorpicker
// 			- писать комментарий
$('#aaa-атрибут id')	- начинается код c # и присваивается к <input id="aaa"
$('.ccc-атрибут class')	- начинается код c . и присваивается к классу <input class="username ccc"
	#####################
	# к конкретной строчке, пример: <p class="something">We are open!</p>
.something
	#####################
	# уникальный - применимо только к одному элементу, пример:
<p id="уникальный">We are open!</p>
	#####################
	# (a+b == 4? true:falce) Если переменная @barber = Дарья Олеговна, тогда выводить 'selected'(то что выбрано), если нет - тогда ''
<option <%= @barber == 'Дарья Олеговна' ? 'selected' : '' %>>Дарья Олеговна</option>